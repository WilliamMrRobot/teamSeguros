// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using teamSegurosApi.Data;

namespace teamSegurosApi.Migrations
{
    [DbContext(typeof(SgContext))]
    [Migration("20191103220229_FixModel")]
    partial class FixModel
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("teamSegurosApi.Models.Ciudad", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("Ciudades");

                    b.HasData(
                        new
                        {
                            Id = new Guid("74b0e01b-0ca4-4054-803d-5dca1f8f7fe7"),
                            Nombre = "Bogota"
                        },
                        new
                        {
                            Id = new Guid("596e351d-b072-4fb5-a9e2-02d5719b5260"),
                            Nombre = "Medellin"
                        },
                        new
                        {
                            Id = new Guid("b895b800-c926-4ac1-92b6-90e1523ed4c0"),
                            Nombre = "Cali"
                        });
                });

            modelBuilder.Entity("teamSegurosApi.Models.Marca", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("Marcas");

                    b.HasData(
                        new
                        {
                            Id = new Guid("abf5b1b5-d34f-448f-8097-ad17696ca343"),
                            Nombre = "Mazda"
                        },
                        new
                        {
                            Id = new Guid("d887a6ec-46a2-4843-b684-108a006287c6"),
                            Nombre = "Renault"
                        },
                        new
                        {
                            Id = new Guid("4d0a1373-2608-4a52-a7bc-9731d73e4d58"),
                            Nombre = "Nissan"
                        });
                });

            modelBuilder.Entity("teamSegurosApi.Models.Modelo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("MarcaId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Nombre")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("MarcaId");

                    b.ToTable("Modeloss");

                    b.HasData(
                        new
                        {
                            Id = new Guid("073cef80-00d0-4245-b758-8cfe00d24d23"),
                            MarcaId = new Guid("abf5b1b5-d34f-448f-8097-ad17696ca343"),
                            Nombre = "Mazda3"
                        },
                        new
                        {
                            Id = new Guid("8d51f976-6139-422c-bfc3-6e07a8290efa"),
                            MarcaId = new Guid("d887a6ec-46a2-4843-b684-108a006287c6"),
                            Nombre = "Symbol"
                        },
                        new
                        {
                            Id = new Guid("b1c581b9-c752-49b6-b2ea-3fb80478fe52"),
                            MarcaId = new Guid("4d0a1373-2608-4a52-a7bc-9731d73e4d58"),
                            Nombre = "Versa"
                        });
                });

            modelBuilder.Entity("teamSegurosApi.Models.Rol", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("74938b5c-52a7-4602-8a6f-9bfa9f694316"),
                            Nombre = "Administrador"
                        },
                        new
                        {
                            Id = new Guid("8e30a13a-9de1-49ce-8788-82a8093c9723"),
                            Nombre = "Usuario"
                        });
                });

            modelBuilder.Entity("teamSegurosApi.Models.Seguro", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UsuarioId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Valor")
                        .HasColumnType("int");

                    b.Property<Guid>("VehiculoId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UsuarioId");

                    b.HasIndex("VehiculoId");

                    b.ToTable("Seguros");
                });

            modelBuilder.Entity("teamSegurosApi.Models.TipoDocumento", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("TipoDocumentos");

                    b.HasData(
                        new
                        {
                            Id = new Guid("d26c7032-b585-4f07-a455-a51d42f22b99"),
                            Nombre = "Cedula de ciudadania"
                        },
                        new
                        {
                            Id = new Guid("a6be2ac7-1a65-4fb2-af46-90968da31b64"),
                            Nombre = "Tarjeta de identidad"
                        });
                });

            modelBuilder.Entity("teamSegurosApi.Models.Usuario", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Apellido")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<Guid>("CiudadId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("FechaNacimiento")
                        .HasColumnType("datetime2");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int>("NumeroDocumento")
                        .HasColumnType("int")
                        .HasMaxLength(50);

                    b.Property<Guid>("RolId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TipoDocumentoId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CiudadId");

                    b.HasIndex("RolId");

                    b.HasIndex("TipoDocumentoId");

                    b.ToTable("Usuarios");
                });

            modelBuilder.Entity("teamSegurosApi.Models.Vehiculo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Año")
                        .HasColumnType("int");

                    b.Property<Guid>("MarcaId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ModeloId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Placa")
                        .IsRequired()
                        .HasColumnType("nvarchar(6)")
                        .HasMaxLength(6);

                    b.HasKey("Id");

                    b.HasIndex("MarcaId");

                    b.HasIndex("ModeloId");

                    b.ToTable("Vehiculos");
                });

            modelBuilder.Entity("teamSegurosApi.Models.Modelo", b =>
                {
                    b.HasOne("teamSegurosApi.Models.Marca", "Marca")
                        .WithMany()
                        .HasForeignKey("MarcaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("teamSegurosApi.Models.Seguro", b =>
                {
                    b.HasOne("teamSegurosApi.Models.Usuario", "Usuario")
                        .WithMany()
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("teamSegurosApi.Models.Vehiculo", "Vehiculo")
                        .WithMany()
                        .HasForeignKey("VehiculoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("teamSegurosApi.Models.Usuario", b =>
                {
                    b.HasOne("teamSegurosApi.Models.Ciudad", "Ciudad")
                        .WithMany()
                        .HasForeignKey("CiudadId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("teamSegurosApi.Models.Rol", "Rol")
                        .WithMany()
                        .HasForeignKey("RolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("teamSegurosApi.Models.TipoDocumento", "TipoDocumento")
                        .WithMany()
                        .HasForeignKey("TipoDocumentoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("teamSegurosApi.Models.Vehiculo", b =>
                {
                    b.HasOne("teamSegurosApi.Models.Marca", "Marca")
                        .WithMany()
                        .HasForeignKey("MarcaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("teamSegurosApi.Models.Modelo", "Modelo")
                        .WithMany()
                        .HasForeignKey("ModeloId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
